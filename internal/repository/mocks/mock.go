// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBlacklist is a mock of Blacklist interface.
type MockBlacklist struct {
	ctrl     *gomock.Controller
	recorder *MockBlacklistMockRecorder
}

// MockBlacklistMockRecorder is the mock recorder for MockBlacklist.
type MockBlacklistMockRecorder struct {
	mock *MockBlacklist
}

// NewMockBlacklist creates a new mock instance.
func NewMockBlacklist(ctrl *gomock.Controller) *MockBlacklist {
	mock := &MockBlacklist{ctrl: ctrl}
	mock.recorder = &MockBlacklistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlacklist) EXPECT() *MockBlacklistMockRecorder {
	return m.recorder
}

// AddToBlacklist mocks base method.
func (m *MockBlacklist) AddToBlacklist(subnet string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlacklist", subnet)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlacklist indicates an expected call of AddToBlacklist.
func (mr *MockBlacklistMockRecorder) AddToBlacklist(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlacklist", reflect.TypeOf((*MockBlacklist)(nil).AddToBlacklist), subnet)
}

// CheckIfIPInBlacklist mocks base method.
func (m *MockBlacklist) CheckIfIPInBlacklist(ip string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfIPInBlacklist", ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfIPInBlacklist indicates an expected call of CheckIfIPInBlacklist.
func (mr *MockBlacklistMockRecorder) CheckIfIPInBlacklist(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfIPInBlacklist", reflect.TypeOf((*MockBlacklist)(nil).CheckIfIPInBlacklist), ip)
}

// RemoveFromBlacklist mocks base method.
func (m *MockBlacklist) RemoveFromBlacklist(subnet string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBlacklist", subnet)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromBlacklist indicates an expected call of RemoveFromBlacklist.
func (mr *MockBlacklistMockRecorder) RemoveFromBlacklist(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBlacklist", reflect.TypeOf((*MockBlacklist)(nil).RemoveFromBlacklist), subnet)
}

// MockWhitelist is a mock of Whitelist interface.
type MockWhitelist struct {
	ctrl     *gomock.Controller
	recorder *MockWhitelistMockRecorder
}

// MockWhitelistMockRecorder is the mock recorder for MockWhitelist.
type MockWhitelistMockRecorder struct {
	mock *MockWhitelist
}

// NewMockWhitelist creates a new mock instance.
func NewMockWhitelist(ctrl *gomock.Controller) *MockWhitelist {
	mock := &MockWhitelist{ctrl: ctrl}
	mock.recorder = &MockWhitelistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhitelist) EXPECT() *MockWhitelistMockRecorder {
	return m.recorder
}

// AddToWhitelist mocks base method.
func (m *MockWhitelist) AddToWhitelist(subnet string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWhitelist", subnet)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWhitelist indicates an expected call of AddToWhitelist.
func (mr *MockWhitelistMockRecorder) AddToWhitelist(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWhitelist", reflect.TypeOf((*MockWhitelist)(nil).AddToWhitelist), subnet)
}

// CheckIfIPInWhitelist mocks base method.
func (m *MockWhitelist) CheckIfIPInWhitelist(ip string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfIPInWhitelist", ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfIPInWhitelist indicates an expected call of CheckIfIPInWhitelist.
func (mr *MockWhitelistMockRecorder) CheckIfIPInWhitelist(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfIPInWhitelist", reflect.TypeOf((*MockWhitelist)(nil).CheckIfIPInWhitelist), ip)
}

// RemoveFromWhitelist mocks base method.
func (m *MockWhitelist) RemoveFromWhitelist(subnet string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWhitelist", subnet)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWhitelist indicates an expected call of RemoveFromWhitelist.
func (mr *MockWhitelistMockRecorder) RemoveFromWhitelist(subnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWhitelist", reflect.TypeOf((*MockWhitelist)(nil).RemoveFromWhitelist), subnet)
}
