// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	core "github.com/arthurshafikov/anti-bruteforce/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), err)
}

// MockLeakyBucket is a mock of LeakyBucket interface.
type MockLeakyBucket struct {
	ctrl     *gomock.Controller
	recorder *MockLeakyBucketMockRecorder
}

// MockLeakyBucketMockRecorder is the mock recorder for MockLeakyBucket.
type MockLeakyBucketMockRecorder struct {
	mock *MockLeakyBucket
}

// NewMockLeakyBucket creates a new mock instance.
func NewMockLeakyBucket(ctrl *gomock.Controller) *MockLeakyBucket {
	mock := &MockLeakyBucket{ctrl: ctrl}
	mock.recorder = &MockLeakyBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeakyBucket) EXPECT() *MockLeakyBucketMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLeakyBucket) Add(arg0 core.AuthorizeInput) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockLeakyBucketMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLeakyBucket)(nil).Add), arg0)
}

// ResetResetBucketTicker mocks base method.
func (m *MockLeakyBucket) ResetResetBucketTicker() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetResetBucketTicker")
}

// ResetResetBucketTicker indicates an expected call of ResetResetBucketTicker.
func (mr *MockLeakyBucketMockRecorder) ResetResetBucketTicker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetResetBucketTicker", reflect.TypeOf((*MockLeakyBucket)(nil).ResetResetBucketTicker))
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuth) Authorize(input core.AuthorizeInput) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", input)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthMockRecorder) Authorize(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuth)(nil).Authorize), input)
}

// MockBlacklist is a mock of Blacklist interface.
type MockBlacklist struct {
	ctrl     *gomock.Controller
	recorder *MockBlacklistMockRecorder
}

// MockBlacklistMockRecorder is the mock recorder for MockBlacklist.
type MockBlacklistMockRecorder struct {
	mock *MockBlacklist
}

// NewMockBlacklist creates a new mock instance.
func NewMockBlacklist(ctrl *gomock.Controller) *MockBlacklist {
	mock := &MockBlacklist{ctrl: ctrl}
	mock.recorder = &MockBlacklistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlacklist) EXPECT() *MockBlacklistMockRecorder {
	return m.recorder
}

// AddToBlacklist mocks base method.
func (m *MockBlacklist) AddToBlacklist(subnetInput core.SubnetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlacklist", subnetInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlacklist indicates an expected call of AddToBlacklist.
func (mr *MockBlacklistMockRecorder) AddToBlacklist(subnetInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlacklist", reflect.TypeOf((*MockBlacklist)(nil).AddToBlacklist), subnetInput)
}

// CheckIfIPInBlacklist mocks base method.
func (m *MockBlacklist) CheckIfIPInBlacklist(ip string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfIPInBlacklist", ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfIPInBlacklist indicates an expected call of CheckIfIPInBlacklist.
func (mr *MockBlacklistMockRecorder) CheckIfIPInBlacklist(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfIPInBlacklist", reflect.TypeOf((*MockBlacklist)(nil).CheckIfIPInBlacklist), ip)
}

// RemoveFromBlacklist mocks base method.
func (m *MockBlacklist) RemoveFromBlacklist(subnetInput core.SubnetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBlacklist", subnetInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromBlacklist indicates an expected call of RemoveFromBlacklist.
func (mr *MockBlacklistMockRecorder) RemoveFromBlacklist(subnetInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBlacklist", reflect.TypeOf((*MockBlacklist)(nil).RemoveFromBlacklist), subnetInput)
}

// MockWhitelist is a mock of Whitelist interface.
type MockWhitelist struct {
	ctrl     *gomock.Controller
	recorder *MockWhitelistMockRecorder
}

// MockWhitelistMockRecorder is the mock recorder for MockWhitelist.
type MockWhitelistMockRecorder struct {
	mock *MockWhitelist
}

// NewMockWhitelist creates a new mock instance.
func NewMockWhitelist(ctrl *gomock.Controller) *MockWhitelist {
	mock := &MockWhitelist{ctrl: ctrl}
	mock.recorder = &MockWhitelistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhitelist) EXPECT() *MockWhitelistMockRecorder {
	return m.recorder
}

// AddToWhitelist mocks base method.
func (m *MockWhitelist) AddToWhitelist(subnetInput core.SubnetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWhitelist", subnetInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWhitelist indicates an expected call of AddToWhitelist.
func (mr *MockWhitelistMockRecorder) AddToWhitelist(subnetInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWhitelist", reflect.TypeOf((*MockWhitelist)(nil).AddToWhitelist), subnetInput)
}

// CheckIfIPInWhitelist mocks base method.
func (m *MockWhitelist) CheckIfIPInWhitelist(ip string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfIPInWhitelist", ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfIPInWhitelist indicates an expected call of CheckIfIPInWhitelist.
func (mr *MockWhitelistMockRecorder) CheckIfIPInWhitelist(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfIPInWhitelist", reflect.TypeOf((*MockWhitelist)(nil).CheckIfIPInWhitelist), ip)
}

// RemoveFromWhitelist mocks base method.
func (m *MockWhitelist) RemoveFromWhitelist(subnetInput core.SubnetInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWhitelist", subnetInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWhitelist indicates an expected call of RemoveFromWhitelist.
func (mr *MockWhitelistMockRecorder) RemoveFromWhitelist(subnetInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWhitelist", reflect.TypeOf((*MockWhitelist)(nil).RemoveFromWhitelist), subnetInput)
}

// MockBucket is a mock of Bucket interface.
type MockBucket struct {
	ctrl     *gomock.Controller
	recorder *MockBucketMockRecorder
}

// MockBucketMockRecorder is the mock recorder for MockBucket.
type MockBucketMockRecorder struct {
	mock *MockBucket
}

// NewMockBucket creates a new mock instance.
func NewMockBucket(ctrl *gomock.Controller) *MockBucket {
	mock := &MockBucket{ctrl: ctrl}
	mock.recorder = &MockBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucket) EXPECT() *MockBucketMockRecorder {
	return m.recorder
}

// ResetBucket mocks base method.
func (m *MockBucket) ResetBucket() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetBucket")
}

// ResetBucket indicates an expected call of ResetBucket.
func (mr *MockBucketMockRecorder) ResetBucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBucket", reflect.TypeOf((*MockBucket)(nil).ResetBucket))
}
